#ifndef GEN_MENU_H
#define GEN_MENU_H

#include "context.h"

class gen_menu :public state
{
protected:
	////////////////////////////////////////////////////////////
	/// \brief contextin which state runs
	///
	////////////////////////////////////////////////////////////
	std::shared_ptr<context>& m_context;

	////////////////////////////////////////////////////////////
	/// \brief text for the menu
	///
	////////////////////////////////////////////////////////////
	sf::Text menu_title;

	////////////////////////////////////////////////////////////
	/// \brief colors of the option texts
	///
	/// first item stands for color of un-selected option
	/// second item stands for color of selected color
	///
	////////////////////////////////////////////////////////////
	sf::Color color_text[2];

	////////////////////////////////////////////////////////////
	/// \brief container for options
	///
	////////////////////////////////////////////////////////////
	std::vector<sf::Text> options;

	////////////////////////////////////////////////////////////
	/// \brief tracks which option is selected
	///
	////////////////////////////////////////////////////////////
	int option_no[2];

	////////////////////////////////////////////////////////////
	/// \brief stores number of options
	///
	////////////////////////////////////////////////////////////
	unsigned number_of_options=0;

	////////////////////////////////////////////////////////////
	/// \brief font pointer to title font 
	///
	////////////////////////////////////////////////////////////
	sf::Font* title_font;

	////////////////////////////////////////////////////////////
	/// \brief font pointer to option font 
	///
	////////////////////////////////////////////////////////////
	sf::Font* option_font;

	////////////////////////////////////////////////////////////
	/// \brief anim function for use in class
	///
	////////////////////////////////////////////////////////////
	virtual void update_anim(float dt) {};
public:

	////////////////////////////////////////////////////////////
	/// \brief constructor
	///
	/// \param context std::shared_ptr<context>& refernce to the active context
	///
	////////////////////////////////////////////////////////////
	gen_menu(std::shared_ptr<context>& context);

	////////////////////////////////////////////////////////////
	/// \brief virtual destructor
	///
	////////////////////////////////////////////////////////////
	virtual ~gen_menu();

	////////////////////////////////////////////////////////////
	/// \brief initializes stuff changed in every menu
	///
	/// contains number of buttons,text they display and 
	/// their font style
	///
	////////////////////////////////////////////////////////////
	virtual void variable_init();

	////////////////////////////////////////////////////////////
	/// \brief initializes stuff which doesnt usually need changing 
	///
	/// contains position and size of text 
	///
	////////////////////////////////////////////////////////////
	virtual void init() override;

	////////////////////////////////////////////////////////////
	/// \brief determines button behaviour on input
	///
	/// In here button should have its update loop for selection
	/// and navigation,behaviour as in what state should be
	/// opened when button pressed,purely virtual function
	///
	////////////////////////////////////////////////////////////
	virtual void pollevents() override =0;

	////////////////////////////////////////////////////////////
	/// \brief updates which button is selected
	///
	/// \param float& deltatime value
	/// 
	/// simply highlights selected button if selection changed
	///
	////////////////////////////////////////////////////////////
	virtual void update(float& deltatime) override;

	////////////////////////////////////////////////////////////
	/// \brief renders the menu
	///
	/// renders menu to window of context given
	///
	////////////////////////////////////////////////////////////
	virtual void render() override;
	

};

////////////////////////////////////////////////////////////
/// 
/// \class gen_menu
///
/// \brief base class for other menu's
///
/// This class has the general layout for other menu's
/// and helps in quickly creating them
///
////////////////////////////////////////////////////////////
#endif
